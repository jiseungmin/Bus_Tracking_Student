{"version":3,"sources":["assets/roadf.png","API/api.js","config/stations.js","screens/Map.js","notification/registerForPushNotifications.js","screens/Home.js","screens/Splash.js","Navigation.js","App.js","assets/tmap_Cheonan_Terminal.html","assets/tmap_Cheonan_Station.html","assets/tmap_Cheonan_Asan_Station.html","assets/tmap_Onyang_Oncheon_Station.html","assets/tmap_Cheonan_Campus.html","assets/icon_back2.png","assets/icon_bus.png","assets/splash_v3.png"],"names":["module","exports","fetchBusLocation","response","fetch","method","data","json","contentObj","JSON","parse","content","latitude","longitude","userLocation","Location","StationFileMap","Cheonan_Terminal","require","Cheonan_Station","Cheonan_Asan_Station","Onyang_Oncheon_Station","Cheonan_Campus","Dimensions","get","width","height","busInfo","Notifications","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","styles","StyleSheet","create","container","flex","backgroundColor","webView","button","padding","borderRadius","alignItems","justifyContent","marginHorizontal","marginTop","buttonText","fontSize","color","fontWeight","infoContainer","flexDirection","paddingHorizontal","paddingVertical","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","textContainer","marginLeft","floatingButton","position","top","left","zIndex","backIcon","imgContainer","busIcon","marginBottom","boldText","mediumText","smallText","Map","route","navigation","webViewRef","useRef","notificationListener","useState","setNotification","isButtonDisabled","setIsButtonDisabled","buttonTitle","Station","params","screenName","htmlPath","Image","resolveAssetSource","useEffect","current","notification","fetchLocation","Alert","alert","text","postMessage","stringify","User_latitude","User_longitude","error","console","setTimeout","View","style","TouchableOpacity","onPress","navigate","source","ref","originWhitelist","Text","numberContainer","registerForPushNotificationsAsync","AsyncStorage","getItem","token","existingStatus","status","finalStatus","log","setItem","projectId","Constants","expoConfig","extra","eas","headers","Accept","body","value","header","contentContainer","btncontainer","item","textAlign","textStyle","card","noticeTitle","noticeContent","Home","Title","setTitle","Content","setContent","goToScreen","internetchecking","title","registerForPushNotifications","backHandler","BackHandler","addEventListener","remove","SafeAreaView","ImageBackground","resizeMode","windowWidth","windowHeight","imageStyle","Splash","timer","clearTimeout","Stack","createStackNavigator","StackScreen","Navigator","initialRouteName","Screen","name","component","options","headerShown","Navigation","NavigationContainer","App"],"mappings":"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","file":"static/js/app.f9d0774e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/roadf.d983cc9a.png\";","import * as Location from \"expo-location\";\n\nconst SERVER_URL =\n  \"https://bus-tracking-server-mu.vercel.app/api/read?filePath=data.json\";\n\nexport const fetchBusLocation = async () => {\n  const response = await fetch(SERVER_URL, { method: \"GET\" });\n  const data = await response.json();\n  const contentObj = JSON.parse(data.content);\n\n  return {\n    latitude: contentObj.latitude,\n    longitude: contentObj.longitude,\n    userLocation: await Location.getCurrentPositionAsync({}),\n  };\n};\n","export const StationFileMap = {\n  Cheonan_Terminal: require(\"../assets/tmap_Cheonan_Terminal.html\"),\n  Cheonan_Station: require(\"../assets/tmap_Cheonan_Station.html\"),\n  Cheonan_Asan_Station: require(\"../assets/tmap_Cheonan_Asan_Station.html\"),\n  Onyang_Oncheon_Station: require(\"../assets/tmap_Onyang_Oncheon_Station.html\"),\n  Cheonan_Campus: require(\"../assets/tmap_Cheonan_Campus.html\"),\n};\n","import { Alert, Image, Platform } from \"react-native\";\nimport { fetchBusLocation } from \"../API/api\";\nimport { WebView } from \"react-native-webview\";\nimport { StationFileMap } from \"../config/stations\";\nimport * as Notifications from \"expo-notifications\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  Dimensions,\n} from \"react-native\";\n\nconst { width, height } = Dimensions.get(\"window\");\n\n/* TODO 운전자 앱에서 버스 정보및 시간표 데이터 받기 */\nconst busInfo = {\n  busNumber: \"11\",\n  route: \"천안터미널\",\n  number: \"77사 7973\",\n  time: \"9:30~10:00~10:30\",\n};\n\n/* 알림 처리 */\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\nconst Map = ({ route, navigation }) => {\n  const webViewRef = useRef(null);\n  const notificationListener = useRef();\n  const [notification, setNotification] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttonTitle, setButtonTitle] = useState(\"현재 버스 위치 확인\");\n\n  const Station = route.params.screenName;\n  const webviewSource = Image.resolveAssetSource(StationFileMap[Station]);\n\n  const htmlPath =\n    Platform.OS === \"android\"\n      ? { uri: `file:///android_asset/tmap_${Station}.html` }\n      : webviewSource;\n\n  /* useEffect */\n  useEffect(() => {\n    // 알림 수신 리스너\n    notificationListener.current =\n      Notifications.addNotificationReceivedListener((notification) => {\n        setNotification(notification);\n      });\n  }, []);\n\n  /* 버스 위치 트래킹 함수 */\n  const fetchLocation = async () => {\n    if (isButtonDisabled) {\n      Alert.alert(\"잠시만 기다려주세요.\", \"3초 후에 다시 시도할 수 있습니다.\", [\n        { text: \"확인\" },\n      ]);\n      return;\n    }\n    setIsButtonDisabled(true);\n    try {\n      const { latitude, longitude, userLocation } = await fetchBusLocation();\n\n      /* TODO 임의로 유저의 위도 경도 설정 해놓음 나중에 수정 */\n      const User_latitude = 36.7988;\n      const User_longitude = 127.077;\n\n      // WebView로 위치 정보 전송\n      if (webViewRef.current) {\n        webViewRef.current.postMessage(\n          JSON.stringify({\n            latitude: latitude,\n            longitude: longitude,\n            User_latitude: User_latitude,\n            User_longitude: User_longitude,\n          })\n        );\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    } finally {\n      setTimeout(() => {\n        setIsButtonDisabled(false);\n      }, 3000);\n    }\n  };\n\n  return (\n  <View style={styles.container}>\n    {/* 웹뷰 위에 플로팅 뒤로 가기 버튼 */}\n    <TouchableOpacity\n      onPress={() => {\n        navigation.navigate(\"Home\");\n      }}\n      style={styles.floatingButton}\n    >\n      <Image\n        source={require(\"../assets/icon_back2.png\")}\n        style={styles.backIcon}\n      />\n    </TouchableOpacity>\n\n    {/* 지도를 표시하는 WebView 컴포넌트 */}\n    <WebView\n      ref={webViewRef}\n      originWhitelist={[\"*\"]}\n      source={htmlPath}\n      style={styles.webView}\n    />\n\n    {/* 추적 토글 버튼 */}\n    <TouchableOpacity onPress={fetchLocation} style={styles.button}>\n      <Text style={styles.buttonText}>{buttonTitle}</Text>\n    </TouchableOpacity>\n\n      {/* 사용자 지정 뷰 */}\n      <View style={styles.infoContainer}>\n        <View style={styles.imgContainer}>\n          <Image source={require(\"../assets/icon_bus.png\")} style={styles.busIcon} />\n          <Text\n            style={styles.smallText}\n          >{`차량 순서 ${busInfo.busNumber}`}</Text>\n        </View>\n        <View style={styles.textContainer}>\n          <Text style={styles.boldText}>노선명 {busInfo.route}</Text>\n          <Text style={styles.mediumText}>운행 시간 : {busInfo.time}</Text>\n          <View style={styles.numberContainer}>\n            <Text style={styles.mediumText}>차량 번호 : {busInfo.number}</Text>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\", // 밝은 회색 톤의 배경색\n  },\n  webView: {\n    width: width, // 화면 너비에 맞게 조정\n    height: height, // 전체 높이의 60%를 차지\n  },\n  button: {\n    backgroundColor: \"#244092\", // iOS 스타일의 기본 파란색\n    padding: 12,\n    borderRadius: 8,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginHorizontal: 20, // 좌우 마진 추가\n    marginTop: 10,\n  },\n  buttonText: {\n    fontSize: 16,\n    color: \"#FFFFFF\", // 텍스트 색상을 흰색으로\n    fontWeight: \"bold\",\n  },\n  infoContainer: {\n    flexDirection: \"row\",\n    alignItems: \"flex-start\",\n    paddingHorizontal: 30, // 좌우 패딩 추가\n    paddingVertical: 30, // 상하 패딩 추가\n    backgroundColor: \"#FFFFFF\", // 백그라운드를 흰색으로 설정\n    shadowColor: \"#000\", // 그림자 색상\n    shadowOffset: { width: 0, height: 1 }, // 그림자 위치\n    shadowOpacity: 0.2, // 그림자 투명도\n    shadowRadius: 1.41, // 그림자 반경\n    elevation: 2, // 안드로이드용 그림자\n  },\n  textContainer: {\n    flex: 1, // 남은 공간 모두 차지\n    marginLeft:30,\n  },\n  floatingButton: {\n    position: \"absolute\",\n    top: Platform.OS === 'ios' ? 50 : 10, // 플랫폼에 따라 상단 여백 조정\n    left: 10,\n    zIndex: 10,\n  },\n  backIcon: {\n    width: 40, // 아이콘 크기 조정\n    height: 40,\n  },\n  imgContainer:{\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  busIcon:{\n    width: 55, // 아이콘 크기 조정\n    height: 55,\n    marginBottom:10\n  },\n  boldText:{\n    fontSize:24,\n    fontWeight:\"bold\",\n    color:\"#444\",\n    marginBottom:5\n  },\n  mediumText:{\n    fontSize:20,\n    color:\"#444\"\n  },\n  smallText:{\n    fontSize:16,\n    fontWeight:\"bold\",\n    color:\"#444\",\n  },\n});\n\n\n\nexport default Map;\n","// registerForPushNotifications.js\nimport * as Notifications from \"expo-notifications\";\nimport Constants from \"expo-constants\";\n\nimport { Alert, Platform } from \"react-native\"; // Platform 모듈 추가\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\n//const PUSH_ENDPOINT = 'http://192.168.0.8:3000/api/token';\nconst PUSH_ENDPOINT = \"https://bus-tracking-server-mu.vercel.app/api/token\";\n\n// 1. Push Notification Token 토큰 생성\nconst registerForPushNotificationsAsync = async () => {\n  const alreadyGranted = await AsyncStorage.getItem(\"notificationsGranted\");\n\n  if (alreadyGranted === \"true\") {\n    return;\n  }\n\n  let token;\n\n  // 1-1 Android 기종일시 알림 채널 설정 defalut\n  if (Platform.OS === \"android\") {\n    await Notifications.setNotificationChannelAsync(\"default\", {\n      name: \"default\",\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: \"#FF231F7C\",\n    });\n  }\n\n  // 1-2 Notification 권한 요청\n  const { status: existingStatus } = await Notifications.getPermissionsAsync();\n  let finalStatus = existingStatus;\n  if (existingStatus !== \"granted\") {\n    const { status } = await Notifications.requestPermissionsAsync();\n    finalStatus = status;\n  }\n\n  // 권한이 거부된 경우 처리\n  if (finalStatus === \"granted\") {\n    token = await Notifications.getExpoPushTokenAsync();\n    console.log(\"Token: \", token);\n    // 권한이 허가되었다는 정보를 저장\n    await AsyncStorage.setItem(\"notificationsGranted\", \"true\");\n  } else {\n    console.log(\"Failed to get push token for push notification!\");\n  }\n\n  token = await Notifications.getExpoPushTokenAsync({\n    projectId: Constants.expoConfig.extra.eas.projectId,\n  });\n\n  return fetch(PUSH_ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      token: {\n        value: token,\n      },\n    }),\n  });\n};\n\nexport default registerForPushNotificationsAsync;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport * as Location from \"expo-location\";\nimport * as Notifications from \"expo-notifications\";\nimport registerForPushNotifications from \"../notification/registerForPushNotifications\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  BackHandler,\n  Dimensions,\n  SafeAreaView,\n  ImageBackground\n} from \"react-native\";\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\nconst { width, height } = Dimensions.get('window'); // Get the screen width\n\n\nconst Home = ({ navigation }) => {\n  const [notification, setNotification] = useState(false);\n  const [Title, setTitle] = useState(\"\");\n  const notificationListener = useRef();\n  const [Content, setContent] = useState(\"\");\n\n  // 각 항목을 클릭했을 때 호출될 함수들\n  const goToScreen = (screenName) => {\n    navigation.navigate(\"Map\", { screenName });\n  };\n\n  const internetchecking = async () => {\n    try {\n      const response = await fetch(\n        \"https://bus-tracking-server-mu.vercel.app/api/notice\",\n        {\n          method: \"GET\",\n        }\n      );\n\n      const data = await response.json();\n      setTitle(data.title);\n      setContent(data.content);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n\n      return [];\n    }\n  };\n\n  useEffect(() => {\n    internetchecking();\n    // 알림 권한 허가 후  TOKEN 값 받기\n    registerForPushNotifications();\n\n    let { status } = Location.requestForegroundPermissionsAsync();\n    if (status !== \"granted\") {\n      return;\n    }\n\n    // 알림 수신 리스너\n    notificationListener.current =\n      Notifications.addNotificationReceivedListener((notification) => {\n        setNotification(notification);\n      });\n\n    const backHandler = BackHandler.addEventListener(\n      \"hardwareBackPress\",\n      () => true\n    );\n\n    return () => backHandler.remove(); // 컴포넌트 해제 시 이벤트 리스너 제거\n  }, []);\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.textStyle}>SMUBUS</Text>\n        <View style={styles.card}>\n          <Text style={styles.noticeTitle}>{Title}</Text>\n          <Text style={styles.noticeContent}>{Content}</Text>\n        </View>\n      </View>\n      \n      <ImageBackground\n        source={require('../assets/roadf.png')}\n        resizeMode=\"contain\"\n        style={styles.contentContainer}>\n        <TouchableOpacity \n          style={styles.btncontainer}\n          onPress={() => goToScreen(\"Cheonan_Terminal\")}>\n          <Text style={styles.item}>천안{\"\\n\"}터미널</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity \n          style={styles.btncontainer}\n          onPress={() => goToScreen(\"Cheonan_Station\")}>\n          <Text style={styles.item}>천안역</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity \n          style={styles.btncontainer}\n          onPress={() => goToScreen(\"Cheonan_Asan_Station\")}>\n          <Text style={styles.item}>천안{\"\\n\"}아산역</Text>\n        </TouchableOpacity>\n      </ImageBackground>\n      <ImageBackground\n        source={require('../assets/roadf.png')}\n        resizeMode=\"contain\" \n        style={styles.contentContainer}>\n        <TouchableOpacity \n          style={styles.btncontainer}\n          onPress={() => goToScreen(\"Onyang_Oncheon_Station\")}>\n          <Text style={styles.item}> 온양온천역{\"\\n\"}(아산터미널)</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={styles.btncontainer}\n          onPress={() => goToScreen(\"Cheonan_Campus\")}>\n          <Text style={styles.item}>천안{\"\\n\"}캠퍼스</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={styles.btncontainer}\n          onPress={() => goToScreen(\"Screen2\")}>\n          <Text style={styles.item}> 시간표{\"\\n\"}바로가기</Text>\n        </TouchableOpacity>\n      </ImageBackground>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#f4f4f4\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingVertical: 20,\n  },\n  header: {\n    flex:1,\n    backgroundColor: \"#244092\",\n    width: '100%', \n    alignItems: 'center',\n    padding: 15,\n  },\n  contentContainer: {\n    flex: 1.5,\n    width: '100%',\n    backgroundColor: \"#f4f4f4\",\n    flexDirection: \"row\",\n    justifyContent: 'space-around', // 요소간 간격을 space-around로 변경하여 균등 배분\n    alignItems: 'center', // 모든 자식 요소를 세로 방향 가운데로 정렬\n    //padding: 15, // 패딩 조정\n  },\n  btncontainer: {\n    width: width * 0.28, // 버튼 크기 조정\n    height: height * 0.08,\n    borderRadius: 8, // 테두리 반경 조정\n    backgroundColor: \"#eee\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n  item: {\n    fontSize: 18, // 폰트 크기 조정\n    fontWeight: \"500\", // 폰트 두께 조정\n    textAlign: \"center\"\n  },\n  textStyle: {\n    color: \"#fff\",\n    fontSize: 28, // 텍스트 크기 조정\n    fontWeight: \"bold\",\n    shadowColor: \"#000\",\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n    elevation: 5,\n  },\n  card: {\n    backgroundColor: \"#fff\",\n    borderRadius: 8,\n    padding: 20,\n    marginTop:20,\n    width: \"90%\", // 카드의 너비를 늘려 콘텐츠가 더 잘 보이게 함\n    height:\"60%\",\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n    elevation: 3,\n  },\n  noticeTitle: {\n    fontSize: 24,\n    fontWeight: \"bold\",\n    marginBottom: 5,\n    color: \"#333\", // 텍스트 색상 조정\n  },\n  noticeContent: {\n    fontSize: 20,\n    color: \"#666\", // 텍스트 색상을 더 진하게 조정\n    textAlign: \"center\",\n  },\n});\n\n\nexport default Home;\n","import React, { useEffect } from \"react\";\nimport { View, Text, StyleSheet, Image, Dimensions } from \"react-native\";\n\nconst windowWidth = Dimensions.get(\"window\").width; // 창의 너비를 가져옵니다.\nconst windowHeight = Dimensions.get(\"window\").height; // 창의 높이를 가져옵니다.\n\nconst Splash = ({ navigation }) => {\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      navigation.navigate(\"Home\");\n    }, 1500);\n\n    return () => clearTimeout(timer);\n  }, [navigation]);\n\n  return (\n    <View style={styles.container}>\n      <Image\n        source={require(\"../assets/splash_v3.png\")}\n        style={styles.imageStyle}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  textStyle: {\n    color: \"white\",\n    fontSize: 36,\n    fontWeight: \"bold\", // 텍스트의 두께를 조절합니다.\n  },\n  imageStyle: {\n    width: windowWidth, // 너비에 대해 유동적인 크기 조정\n    height: windowHeight, // 높이에 대해 유동적인 크기 조정\n    resizeMode: \"cover\",\n  },\n});\n\nexport default Splash;\n","import React from \"react\";\nimport Map from \"./screens/Map\";\nimport Home from \"./screens/Home\";\nimport Splash from \"./screens/Splash\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { NavigationContainer } from \"@react-navigation/native\";\n\nconst Stack = createStackNavigator();\n\nfunction StackScreen() {\n  return (\n    <Stack.Navigator initialRouteName=\"Splash\">\n      <Stack.Screen\n        name=\"Splash\"\n        component={Splash}\n        options={{ headerShown: false }}\n      ></Stack.Screen>\n      <Stack.Screen\n        name=\"Home\"\n        component={Home}\n        options={{ headerShown: false }}\n      ></Stack.Screen>\n      <Stack.Screen\n        name=\"Map\"\n        component={Map}\n        options={{ headerShown: false }}\n      ></Stack.Screen>\n    </Stack.Navigator>\n  );\n}\n\nfunction Navigation() {\n  return (\n    <NavigationContainer>\n      <StackScreen />\n    </NavigationContainer>\n  );\n}\n\nexport default Navigation;\n","import React from \"react\";\nimport Navigation from './Navigation';\n\nexport default function App() {\n\n  return (\n    <Navigation/>\n  );\n}\n","// Module\nvar code = \"<html> <head> <meta http-equiv=Content-Type content=\\\"text/html;charset=utf-8,initial-scale=1\\\" , name=viewport /> <title>simpleMap</title> <style>body,html{margin:0;padding:0;overflow:hidden;height:100%}#map_div{width:100%;height:100%}</style> <script src=\\\"https://apis.openapi.sk.com/tmap/jsv2?version=1&appKey=9syZeMdaYD79paz4xmvSpYa8AOxVgRxay0YUQWR5\\\"></script> <script>var map;function initTmap(){map=new Tmapv2.Map(\\\"map_div\\\",{center:new Tmapv2.LatLng(36.8002,127.0715),width:\\\"100%\\\",height:\\\"100%\\\",zoom:16});var a=[new Tmapv2.LatLng(36.8002,127.0715),new Tmapv2.LatLng(36.80021,127.0709),new Tmapv2.LatLng(36.79942,127.0718),new Tmapv2.LatLng(36.79807,127.0718),new Tmapv2.LatLng(36.79804,127.078),new Tmapv2.LatLng(36.79764,127.079),new Tmapv2.LatLng(36.79776,127.0801),new Tmapv2.LatLng(36.7975,127.0861),new Tmapv2.LatLng(36.80026,127.0857),new Tmapv2.LatLng(36.80039,127.0868),new Tmapv2.LatLng(36.79579,127.0876),new Tmapv2.LatLng(36.79897,127.0939),new Tmapv2.LatLng(36.80006,127.0973),new Tmapv2.LatLng(36.80161,127.1054),new Tmapv2.LatLng(36.82273,127.1119),new Tmapv2.LatLng(36.82287,127.1182),new Tmapv2.LatLng(36.82364,127.1239),new Tmapv2.LatLng(36.82642,127.1329),new Tmapv2.LatLng(36.82477,127.1529),new Tmapv2.LatLng(36.82472,127.1592),new Tmapv2.LatLng(36.82402,127.1604),new Tmapv2.LatLng(36.82127,127.1624),new Tmapv2.LatLng(36.81895,127.1584),new Tmapv2.LatLng(36.81887,127.1535)];polyline=new Tmapv2.Polyline({path:a,strokeColor:\\\"#FF0000\\\",strokeWeight:5,map:map});var e=null;document.addEventListener(\\\"DOMContentLoaded\\\",initTmap),document.addEventListener(\\\"message\\\",(function(a){try{var n=JSON.parse(a.data),t=n.latitude,p=n.longitude,r=n.User_latitude,m=n.User_longitude;e&&(e.setMap(null),e=null);var L=new Tmapv2.LatLng(r,m);map.setCenter(L),map&&t&&p?e=new Tmapv2.Marker({position:new Tmapv2.LatLng(t,p),map:map}):document.ReactNativeWebView.postMessage(\\\"error: map or coordinates not ready\\\")}catch(a){document.ReactNativeWebView.postMessage(\\\"error: parsing message from React Native\\\"),console.error(\\\"Error parsing message from React Native:\\\",a)}})),window.addEventListener(\\\"DOMContentLoaded\\\",initTmap),window.addEventListener(\\\"message\\\",(function(a){try{var n=JSON.parse(a.data),t=n.latitude,p=n.longitude,r=n.User_latitude;n.User_longitude;e&&(e.setMap(null),e=null);var m=new Tmapv2.LatLng(r,r);map.setCenter(m),map&&t&&p?new Tmapv2.Marker({position:new Tmapv2.LatLng(t,p),map:map}):window.ReactNativeWebView.postMessage(\\\"error: map or coordinates not ready\\\")}catch(a){window.ReactNativeWebView.postMessage(\\\"error: parsing message from React Native\\\"),console.error(\\\"Error parsing message from React Native:\\\",a)}}))}</script> </head> <body onload=initTmap()> <div id=map_div></div> </body> </html> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<html> <head> <meta http-equiv=Content-Type content=\\\"text/html;charset=utf-8,initial-scale=1\\\" , name=viewport /> <title>simpleMap</title> <style>body,html{margin:0;padding:0;overflow:hidden;height:100%}#map_div{width:100%;height:100%}</style> <script src=\\\"https://apis.openapi.sk.com/tmap/jsv2?version=1&appKey=9syZeMdaYD79paz4xmvSpYa8AOxVgRxay0YUQWR5\\\"></script> <script>var map;function initTmap(){map=new Tmapv2.Map(\\\"map_div\\\",{center:new Tmapv2.LatLng(36.8002,127.0715),width:\\\"100%\\\",height:\\\"100%\\\",zoom:17});var e=[new Tmapv2.LatLng(36.8002,127.0715),new Tmapv2.LatLng(36.79764,127.079),new Tmapv2.LatLng(36.79776,127.0801),new Tmapv2.LatLng(36.7975,127.0861),new Tmapv2.LatLng(36.80026,127.0857),new Tmapv2.LatLng(36.80039,127.0868),new Tmapv2.LatLng(36.79579,127.0876)];polyline=new Tmapv2.Polyline({path:e,strokeColor:\\\"#FF0000\\\",strokeWeight:5,map:map});var a=null;document.addEventListener(\\\"DOMContentLoaded\\\",initTmap),document.addEventListener(\\\"message\\\",(function(e){try{var t=JSON.parse(e.data),n=t.latitude,r=t.longitude,o=t.User_latitude,i=t.User_longitude;a&&(a.setMap(null),a=null);var p=new Tmapv2.LatLng(o,i);map.setCenter(p),map&&n&&r?a=new Tmapv2.Marker({position:new Tmapv2.LatLng(n,r),map:map}):document.ReactNativeWebView.postMessage(\\\"error: map or coordinates not ready\\\")}catch(e){document.ReactNativeWebView.postMessage(\\\"error: parsing message from React Native\\\"),console.error(\\\"Error parsing message from React Native:\\\",e)}})),window.addEventListener(\\\"DOMContentLoaded\\\",initTmap),window.addEventListener(\\\"message\\\",(function(e){try{var t=JSON.parse(e.data),n=t.latitude,r=t.longitude,o=t.User_latitude;t.User_longitude;a&&(a.setMap(null),a=null);var i=new Tmapv2.LatLng(o,o);map.setCenter(i),map&&n&&r?new Tmapv2.Marker({position:new Tmapv2.LatLng(n,r),map:map}):window.ReactNativeWebView.postMessage(\\\"error: map or coordinates not ready\\\")}catch(e){window.ReactNativeWebView.postMessage(\\\"error: parsing message from React Native\\\"),console.error(\\\"Error parsing message from React Native:\\\",e)}}))}</script> </head> <body onload=initTmap()> <div id=map_div></div> </body> </html> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<html> <head> <meta http-equiv=Content-Type content=\\\"text/html;charset=utf-8,initial-scale=1,width=device-width,maximum-scale=1\\\" name=viewport /> <title>simpleMap</title> <style>body,html{margin:0;padding:0;overflow:hidden;height:100%}#map_div{width:100%;height:100%}</style> <script src=\\\"https://apis.openapi.sk.com/tmap/jsv2?version=1&appKey=9syZeMdaYD79paz4xmvSpYa8AOxVgRxay0YUQWR5\\\"></script> <script>var map;function initTmap(){map=new Tmapv2.Map(\\\"map_div\\\",{center:new Tmapv2.LatLng(36.8002,127.0715),width:\\\"100%\\\",height:\\\"100%\\\",zoom:17});var e=[new Tmapv2.LatLng(36.8002,127.0715),new Tmapv2.LatLng(36.80021,127.0709),new Tmapv2.LatLng(36.79942,127.0718),new Tmapv2.LatLng(36.79807,127.0718)];polyline=new Tmapv2.Polyline({path:e,strokeColor:\\\"#FF0000\\\",strokeWeight:5,map:map});var a=null;document.addEventListener(\\\"DOMContentLoaded\\\",initTmap),document.addEventListener(\\\"message\\\",(function(e){try{var t=JSON.parse(e.data),n=t.latitude,r=t.longitude,o=t.User_latitude,i=t.User_longitude;a&&(a.setMap(null),a=null);var s=new Tmapv2.LatLng(o,i);map.setCenter(s),map&&n&&r?a=new Tmapv2.Marker({position:new Tmapv2.LatLng(n,r),map:map}):document.ReactNativeWebView.postMessage(\\\"error: map or coordinates not ready\\\")}catch(e){document.ReactNativeWebView.postMessage(\\\"error: parsing message from React Native\\\"),console.error(\\\"Error parsing message from React Native:\\\",e)}})),window.addEventListener(\\\"DOMContentLoaded\\\",initTmap),window.addEventListener(\\\"message\\\",(function(e){try{var t=JSON.parse(e.data),n=t.latitude,r=t.longitude,o=t.User_latitude;t.User_longitude;a&&(a.setMap(null),a=null);var i=new Tmapv2.LatLng(o,o);map.setCenter(i),map&&n&&r?new Tmapv2.Marker({position:new Tmapv2.LatLng(n,r),map:map}):window.ReactNativeWebView.postMessage(\\\"error: map or coordinates not ready\\\")}catch(e){window.ReactNativeWebView.postMessage(\\\"error: parsing message from React Native\\\"),console.error(\\\"Error parsing message from React Native:\\\",e)}}))}</script> </head> <body onload=initTmap()> <div id=map_div></div> </body> </html> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<html> <head> <meta http-equiv=Content-Type content=\\\"text/html;charset=utf-8,initial-scale=1\\\" , name=viewport /> <title>simpleMap</title> <style>body,html{margin:0;padding:0;overflow:hidden;height:100%}#map_div{width:100%;height:100%}</style> <script src=\\\"https://apis.openapi.sk.com/tmap/jsv2?version=1&appKey=9syZeMdaYD79paz4xmvSpYa8AOxVgRxay0YUQWR5\\\"></script> <script>var map;function initTmap(){map=new Tmapv2.Map(\\\"map_div\\\",{center:new Tmapv2.LatLng(36.8002,127.0715),width:\\\"100%\\\",height:\\\"100%\\\",zoom:17});var e=[new Tmapv2.LatLng(36.82364,127.1239),new Tmapv2.LatLng(36.82642,127.1329),new Tmapv2.LatLng(36.82477,127.1529),new Tmapv2.LatLng(36.82472,127.1592),new Tmapv2.LatLng(36.82402,127.1604),new Tmapv2.LatLng(36.82127,127.1624),new Tmapv2.LatLng(36.81895,127.1584),new Tmapv2.LatLng(36.81887,127.1535)];polyline=new Tmapv2.Polyline({path:e,strokeColor:\\\"#FF0000\\\",strokeWeight:5,map:map});var a=null;document.addEventListener(\\\"DOMContentLoaded\\\",initTmap),document.addEventListener(\\\"message\\\",(function(e){try{var t=JSON.parse(e.data),n=t.latitude,r=t.longitude,o=t.User_latitude,i=t.User_longitude;a&&(a.setMap(null),a=null);var p=new Tmapv2.LatLng(o,i);map.setCenter(p),map&&n&&r?a=new Tmapv2.Marker({position:new Tmapv2.LatLng(n,r),map:map}):document.ReactNativeWebView.postMessage(\\\"error: map or coordinates not ready\\\")}catch(e){document.ReactNativeWebView.postMessage(\\\"error: parsing message from React Native\\\"),console.error(\\\"Error parsing message from React Native:\\\",e)}})),window.addEventListener(\\\"DOMContentLoaded\\\",initTmap),window.addEventListener(\\\"message\\\",(function(e){try{var t=JSON.parse(e.data),n=t.latitude,r=t.longitude,o=t.User_latitude;t.User_longitude;a&&(a.setMap(null),a=null);var i=new Tmapv2.LatLng(o,o);map.setCenter(i),map&&n&&r?new Tmapv2.Marker({position:new Tmapv2.LatLng(n,r),map:map}):window.ReactNativeWebView.postMessage(\\\"error: map or coordinates not ready\\\")}catch(e){window.ReactNativeWebView.postMessage(\\\"error: parsing message from React Native\\\"),console.error(\\\"Error parsing message from React Native:\\\",e)}}))}</script> </head> <body onload=initTmap()> <div id=map_div></div> </body> </html> \";\n// Exports\nmodule.exports = code;","// Module\nvar code = \"<html> <head> <meta http-equiv=Content-Type content=\\\"text/html;charset=utf-8,initial-scale=1\\\" , name=viewport /> <title>simpleMap</title> <style>body,html{margin:0;padding:0;overflow:hidden;height:100%}#map_div{width:100%;height:100%}</style> <script src=\\\"https://apis.openapi.sk.com/tmap/jsv2?version=1&appKey=9syZeMdaYD79paz4xmvSpYa8AOxVgRxay0YUQWR5\\\"></script> <script>var map;function initTmap(){map=new Tmapv2.Map(\\\"map_div\\\",{center:new Tmapv2.LatLng(36.8002,127.0715),width:\\\"100%\\\",height:\\\"100%\\\",zoom:17});var e=[new Tmapv2.LatLng(36.8002,127.0715),new Tmapv2.LatLng(36.82402,127.1604),new Tmapv2.LatLng(36.82127,127.1624),new Tmapv2.LatLng(36.81895,127.1584),new Tmapv2.LatLng(36.81887,127.1535)];polyline=new Tmapv2.Polyline({path:e,strokeColor:\\\"#FF0000\\\",strokeWeight:5,map:map});var a=null;document.addEventListener(\\\"DOMContentLoaded\\\",initTmap),document.addEventListener(\\\"message\\\",(function(e){try{var t=JSON.parse(e.data),n=t.latitude,r=t.longitude,o=t.User_latitude,i=t.User_longitude;a&&(a.setMap(null),a=null);var s=new Tmapv2.LatLng(o,i);map.setCenter(s),map&&n&&r?a=new Tmapv2.Marker({position:new Tmapv2.LatLng(n,r),map:map}):document.ReactNativeWebView.postMessage(\\\"error: map or coordinates not ready\\\")}catch(e){document.ReactNativeWebView.postMessage(\\\"error: parsing message from React Native\\\"),console.error(\\\"Error parsing message from React Native:\\\",e)}})),window.addEventListener(\\\"DOMContentLoaded\\\",initTmap),window.addEventListener(\\\"message\\\",(function(e){try{var t=JSON.parse(e.data),n=t.latitude,r=t.longitude,o=t.User_latitude;t.User_longitude;a&&(a.setMap(null),a=null);var i=new Tmapv2.LatLng(o,o);map.setCenter(i),map&&n&&r?new Tmapv2.Marker({position:new Tmapv2.LatLng(n,r),map:map}):window.ReactNativeWebView.postMessage(\\\"error: map or coordinates not ready\\\")}catch(e){window.ReactNativeWebView.postMessage(\\\"error: parsing message from React Native\\\"),console.error(\\\"Error parsing message from React Native:\\\",e)}}))}</script> </head> <body onload=initTmap()> <div id=map_div></div> </body> </html> \";\n// Exports\nmodule.exports = code;","module.exports = __webpack_public_path__ + \"static/media/icon_back2.8bf6cd8a.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_bus.54cf665e.png\";","module.exports = __webpack_public_path__ + \"static/media/splash_v3.e5d5c736.png\";"],"sourceRoot":""}